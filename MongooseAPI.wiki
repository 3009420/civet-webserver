#summary Covers API functions
#labels Featured

*NOTE:* _This page covers the head revision of the library. There could be differences with the latest released version._

When Mongoose is embedded, there are two distinct steps that happen at run time. For these two steps, different set of functions exist:
   # Starting and configuring web server. All those functions take `struct mg_context *` as a parameter, except `mg_start()` function which actually starts the web server and returns `struct mg_context *` and thus must be called first. 
   # Serving requests. During the configuration stage, user may register URI handlers: functions that will be called when certain URIs are requested. These functions are called asynchronously each time an URI is accessed for which handler is registerd. In each user callback an HTTP request information is passed, and within an URI handler, user may call functions to write a reply, get HTTP headers, etcetera. All those functions take `struct mg_connection *` as an argument.

== Data Structures ==
  <dt>*`struct mg_context`*</dt>
  <dd>Mongoose context, also called an instance handle</dd>
  <dt>*`struct mg_connection`*</dt>
  <dd>HTTP connection handle</dd>
  <dt>*`struct mg_request_info`*</dt>
  <dd>HTTP request information. This structure is passed to the URI handler function. Please refer to the [http://mongoose.googlecode.com/svn/trunk/mongoose.h mongoose.h] header to see what fields are present</dd>

== Starting, configuring, and stopping Mongoose instance ==
  <dt>*`struct mg_context * mg_start(void)`*</dt>
  <dd>Start Mongoose server instance in separate thread. Return instance handler - a Mongoose context. The context is needed for further interaction with the web server, like setting an option, stopping it, etcetera</dd>
  <dt>*`void mg_stop(struct mg_context *)`*</dt>
  <dd>Must be called last, when user wants to stop the web server, and release all associated resources. This function blocks until all Mongoose threads are stopped</dd>
  <dt>*`const char *mg_get_option(struct mg_context *context, const char *option_name)`*</dt>
  <dd>Return current value of particular option</dd>
  <dt>*`int mg_set_option(struct mg_context *context, const char *option_name, const char *option_value)`*</dt>
  <dd>Set a value for a particular option, option value gets copied. Option value must be valid nul-terminated ASCII or UTF-8 string. It is safe to change any option at any time. Return value is `-1` if option is unknown, `0` if function failed, and `1` if function succeeded</dd>
  <dt>*`void mg_set_uri_callback(struct mg_context *context, const char *uri_regex, mg_callback_t func, void *user_data)`*</dt>
  <dd>Register URI handler. It is possible to handle many URIs by using `*` in the `uri_regex`, which matches zero or more characters. `user_data` pointer will be passed to the handler as third parameter. If `func` is `NULL`, then the handler is removed</dd>
  <dt>*`void mg_set_error_callback(struct mg_context *context, int error_code, mg_callback_t func, void *user_data)`*</dt>
  <dd>Register error handler, for example, "404 Not Found" error handler. Passing 0 as `error_code` binds function to all errors. Error code value is passed as status_code in request info</dd>
  <dt>*`void mg_set_log_callback(struct mg_context *context, mg_callback_t func)`*</dt>
  <dd>Specify a function which will receive all server log messages</dd>
  <dt>*`void mg_set_ssl_password_callback(struct mg_context *ctx, mg_spcb_t func)`*</dt>
  <dd>Needed only if SSL certificate asks for a password. Instead of prompting for a password, specified function will be called</dd>
  <dt>*`void mg_set_log_callback(struct mg_context *ctx, mg_callback_t func)`*</dt>
  <dd>Set a function that will receive all server log messages</dd>
  <dt>*`int mg_modify_passwords_file(struct mg_context *ctx, const char *file_name,      const char *user_name, const char *password)`*</dt>
  <dd>Add, edit or delete the entry in the passwords file. If password is not NULL, entry is added (or modified if already exists). If password is NULL, entry is deleted. Return 1 on success, 0 on error</dd>

== Handling user requests ==
  <dt>*`int mg_write(struct mg_connection *, const void *buf, int len)`*</dt>
  <dd>Send data to the client. Return number of bytes sent. If the number of bytes sent is less then requested or equals to -1, network error occured, usually meaning the remote side has closed the connection</dd>
  <dt>*`int mg_printf(struct mg_connection *, const char *fmt, ...)`*</dt>
  <dd> Send data to the client, using `printf()` semantics. Note that `mg_printf()` uses internal buffer of size MAX_REQUEST_SIZE (16 Kb by default), so do not print data that is bigger than that, otherwise it will be truncated. Return number of bytes sent. Error semantics the same as for the `mg_write()` function</dd>
  <dt>*`const char *mg_get_header(const struct mg_connection *, const char *header_name)`*</dt>
  <dd>Get value of particular HTTP header</dd>
  <dt>*`char *mg_get_var(const struct mg_connection *, const char *var_name)`*</dt>
  <dd> Get the value of particular form variable. *<font color="red">Note:</font>* this function (unlinke others) allocates memory! The return value must be `mg_free()`-ed by the caller. If variable is not present in both URI query string, and POST buffer, NULL is returned </dd>
  <dt>*`char *mg_free(void *ptr)`*</dt>
  <dd>Free a variable returned by `mg_get_var()` </dd>
  <dt>*`void mg_authorize(struct mg_connection *)`*</dt>
  <dd> Set authorization flag for the connection. Should be used only within callbacks registered with `mg_protect_uri()`</dd>

== General helper functions ==
  <dt>*`const char *mg_version(void)`*</dt>
  <dd>Return current Mongoose version</dd>
  <dt>*`void mg_show_usage_string(FILE *)`*</dt>
  <dd>Show Mongoose usage string</dd>