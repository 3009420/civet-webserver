#summary Covers embedding strategies, with examples
#labels Featured

== C/C++ ==
End to end example of embedding the webserver into the application:

   * Copy [http://mongoose.googlecode.com/svn/trunk/mongoose.c mongoose.c], [http://mongoose.googlecode.com/svn/trunk/mongoose.h mongoose.h] to your source code directory
   * Write code that starts and configures Mongoose in one of your C/C++ files. As an alternative, you can just take [http://mongoose.googlecode.com/svn/trunk/examples/authentication.c authentication.c] and rename in to my_app.c 
   * Build and run the program. On UNIX:
{{{
$ cc my_app.c mongoose.c -ldl -lpthread -o prog
$ ./prog
}}}
   * Start your browser, type in URL http://127.0.0.1:8080/ . You must see the page printed by function `login_page()`.

This example shows how to implement an authentication, and how to handle /login URI by an embedded function. Extend this example according to your needs.

You can refer to Mongoose unit test [http://mongoose.googlecode.com/svn/trunk/test/embed.c embed.c] to see the how embedding is done there. The API is easy to understand and use, however, if you have questions, do not hesitate to drop a message to the [http://groups.google.com/group/mongoose-users mailing list], where all questions get answered.

== Python ==
Since verion 2.6, Mongoose provides a wrapper module for Python. To use it on UNIX,
   * Copy two files into your project:
      * `_mongoose.so`: you need to build it by running `make` in the source tree
      * [http://mongoose.googlecode.com/svn/trunk/bindings/python/mongoose.py mongoose.py]
   * Write code in your application to use Mongoose. See the example at [http://mongoose.googlecode.com/svn/trunk/bindings/python/example.py example.py]

If you want to start from scratch, you can use the example file provided in the Mongoose source tree as a starting point. Here is a procedure:
   * Execute following commands to build a shared library and run the example
{{{
% svn checkout http://mongoose.googlecode.com/svn/trunk/ mongoose-read-only
% cd mongoose-readonly
% make linux     # Create_mongoose.so
% LD_LIBRARY_PATH=. python ./bindings/python/example.py  # This starts server
}}}
   * Start your browser, go to http://localhost:8080/foo
   * Modify example.py according to your needs.

== C# ==
   * Download three files in some directory:
      * `_mongoose.dll` (in the download section, get mongoose-XX.dll and rename it to `_mongoose.dll`)
      * [http://mongoose.googlecode.com/svn/trunk/bindings/csharp/mongoose.cs mongoose.cs]
      * [http://mongoose.googlecode.com/svn/trunk/bindings/csharp/example.cs example.cs]
   * Compile C# example in the MS Visual Studio, or in the command prompt by entering command
{{{
csc example.cs mongoose.cs
}}}
   * Run `example.exe`, start your browser and go to http://127.0.0.1:8080/foo

== Ruby ==
<font color="orange">TODO</font>

== Dynamic loading - MS Visual Basic example ==

You can use Mongoose in any language that supports dynamic loading. You need the Mongoose Dynamically Linked Library (DLL) built. On Windows platform, it comes preinstalled as `mongoose.dll` in the installation directory. Below is an example on how do you use Mongoose from the Visual Basic program:

{{{
Imports System.Runtime.InteropServices

Module Module1

    ' Mongoose API as defined in mongoose.h header file, http://mongoose.googlecode.com/svn/trunk/mongoose.h
    '

    <StructLayout(LayoutKind.Sequential, Pack:=1)> Structure mg_http_header
        Public name As String
        Public value As String
    End Structure

    <StructLayout(LayoutKind.Sequential, Pack:=1)> Structure mg_request_info
        Public request_method As String
        Public uri As String
        Public query_string As String
        Public post_data As String
        Public remote_user As String
        Public remote_ip As Integer
        Public remote_port As Integer
        Public post_data_len As Integer
        Public http_version_minor As Integer
        Public http_version_major As Integer
        Public status_code As Integer
        Public num_headers As Integer
        <MarshalAs(UnmanagedType.ByValArray, SizeConst:=64)> Public http_headers() As mg_http_header
    End Structure

    Declare Function mg_start Lib "C:\mongoose.dll" () As IntPtr
    Declare Function mg_set_option Lib "C:\mongoose.dll" (ByVal ctx As IntPtr, ByVal opt_name As String, ByVal opt_value As String) As Integer
    Declare Sub mg_bind_to_uri Lib "C:\mongoose.dll" (ByVal ctx As IntPtr, ByVal uri_regex As String, ByVal func As mg_callback_t)
    Declare Function mg_write Lib "C:\mongoose.dll" (ByVal conn As IntPtr, ByVal fmt As String, ByVal len As Integer) As Integer

    Delegate Sub mg_callback_t(ByVal ctx As IntPtr, ByRef request_info As mg_request_info)

    ' Now goes VB code that uses the API. This function gets called when "/vb" URI is requested
    '
    Sub UriHandler(ByVal conn As IntPtr, ByRef request_info As mg_request_info)
        Dim output As String, i As Integer
        output = "HTTP/1.1 200 OK" & vbCrLf & vbCrLf & "Hello from VB!" & vbCr
        output &= "Method: " & request_info.request_method & vbCr
        output &= "URI: " & request_info.uri & vbCr
        output &= "HTTP headers: " & vbCr
        For i = 0 To request_info.num_headers - 1
            output &= "  " & request_info.http_headers(i).name & ": " & request_info.http_headers(i).value & vbCr
        Next i
        mg_write(conn, output, output.Length)
    End Sub

    ' Create web server instance, set options, and fall to sleep. Web server continues to execute in another thread, serving HTTP requests
    '
 
    Sub Main()
        Dim ctx As IntPtr
        ctx = mg_start()
        mg_set_option(ctx, "ports", "9090")
        mg_set_option(ctx, "root", "C:\\")
        mg_bind_to_uri(ctx, "/vb", AddressOf UriHandler)
        Threading.Thread.Sleep(9999999)
    End Sub

End Module
}}}

Copy/paste the code in your Visual Basic IDE, copy `mongoose.dll` to the `c:\` directory, run VB program. Start you browser, go to http://127.0.0.1:9090 . You must see the content of your disk `c:\`. Go to http://127.0.0.1:9090/vb , you must see "Hello from VB" message.